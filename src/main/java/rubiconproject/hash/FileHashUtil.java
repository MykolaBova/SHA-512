package rubiconproject.hash;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import rubiconproject.FileWithHash;
import rubiconproject.FileUtil;

import java.io.File;
import java.util.LinkedList;
import java.util.List;

/**
 * Calculate hash for {@link File} file or directory using {@link HashGenerator} algorithm
 */
public class FileHashUtil {
    private static final Logger LOG = LogManager.getLogger(FileHashUtil.class);
    private static final HashGenerator GENERATOR = new Sha512HashGenerator();

    /**
     * Calculates hash recursively for each object if {@link File#isDirectory()}
     *
     * @param file {@link File} file or directory
     * @return {@link FileWithHash} result
     */
    public static FileWithHash recursionHash(File file)  {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            List<FileWithHash> internalList = new LinkedList<>();
            for (File f : files) {
                internalList.add(recursionHash(f));
            }
            return FileWithHash.builder()
                    .setFileName(file.getName())
                    .setHash(dirHash(file, internalList))
                    .setInternalFiles(internalList)
                    .build();
        } else {
            return fileHash(file);
        }
    }

    /**
     * Calculate hash for directory
     * The hash of a directory is generated by hashing each file or subdirectory in alphabetical order,
     * then concatenating the hashed value, then applying SHA-512 hash to the results
     *
     * @param file {@link File} directory
     * @param internalList {@link List} of {@link FileWithHash} internal files or directories
     * @return {@link String} hash result
     */
    static String dirHash(File file, List<FileWithHash> internalList) {
        StringBuilder builder = new StringBuilder();
        for (FileWithHash fh : internalList) {
            builder.append(fh.getHash());
        }
        String hash = GENERATOR.getHash(builder.toString().getBytes());
        LOG.info("Dir {} hash is {}", file.getName(), hash);
        return hash;
    }

    /**
     * Calculate hash for file
     * The hash of a file is a hash of its contents then hexed encoded.
     *
     * @param file {@link File} file
     * @return {@link FileWithHash} result
     */
    static FileWithHash fileHash(File file) {
        byte[] content = FileUtil.readFile(file);
        String hash = GENERATOR.getHash(content);
        LOG.info("File {} hash is {}", file.getName(), hash);

        return FileWithHash.builder()
                .setFileName(file.getName())
                .setHash(hash)
                .build();
    }
}
